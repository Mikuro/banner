package com.promo

import io.ktor.http.*
import io.ktor.http.content.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import org.slf4j.LoggerFactory
import java.util.*

fun Application.configureRouting() {
    val minioService = MinioService()
    val logger = LoggerFactory.getLogger("PromoService")

    // –•—Ä–∞–Ω–∏–º metadata –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    val imageMetadata = mutableMapOf<String, String>() // imageId -> contentType

    routing {
        get("/") {
            call.respondText("–ü—Ä–æ–º–æ-—Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ")
        }

        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        post("/upload") {
            try {
                val multipart = call.receiveMultipart()
                var imageBytes: ByteArray? = null
                var contentType = "image/jpeg"

                multipart.forEachPart { part ->
                    when (part) {
                        is PartData.FileItem -> {
                            if (part.name == "image") {
                                imageBytes = part.streamProvider().readBytes()
                                contentType = part.contentType?.toString() ?: "image/jpeg"
                            }
                        }
                        else -> {}
                    }
                    part.dispose()
                }

                if (imageBytes == null) {
                    call.respond(
                        HttpStatusCode.BadRequest,
                        UploadResponse(false, message = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    )
                    return@post
                }

                val imageId = minioService.uploadImage(imageBytes!!, contentType)
                imageMetadata[imageId] = contentType

                logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $imageId")

                call.respond(
                    HttpStatusCode.OK,
                    UploadResponse(true, imageId = imageId, message = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                )

            } catch (e: Exception) {
                logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", e)
                call.respond(
                    HttpStatusCode.InternalServerError,
                    UploadResponse(false, message = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}")
                )
            }
        }

        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É (–≤–∞—Ä–∏–∞–Ω—Ç 1)
        get("/link/{imageId}") {
            try {
                val imageId = call.parameters["imageId"] ?: ""
                val contentType = imageMetadata[imageId]

                if (contentType == null) {
                    call.respond(
                        HttpStatusCode.NotFound,
                        LinkResponse(false, message = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    )
                    return@get
                }

                val imageUrl = minioService.getPresignedUrl(imageId, contentType)

                call.respond(
                    HttpStatusCode.OK,
                    LinkResponse(true, imageUrl = imageUrl)
                )

            } catch (e: Exception) {
                logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏", e)
                call.respond(
                    HttpStatusCode.InternalServerError,
                    LinkResponse(false, message = "–û—à–∏–±–∫–∞: ${e.message}")
                )
            }
        }

        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–≤–∞—Ä–∏–∞–Ω—Ç 2)
        get("/html-embed/{imageId}") {
            try {
                val imageId = call.parameters["imageId"] ?: ""
                val contentType = imageMetadata[imageId]

                if (contentType == null) {
                    call.respond(
                        HttpStatusCode.NotFound,
                        HtmlResponse(false, message = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    )
                    return@get
                }

                val imageBytes = minioService.getImageBytes(imageId, contentType)
                val base64Image = Base64.getEncoder().encodeToString(imageBytes)

                val htmlTemplate = """
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="UTF-8">
                        <title>–ü—Ä–æ–º–æ –±–∞–Ω–Ω–µ—Ä</title>
                        <style>
                            .promo-banner {
                                max-width: 100%;
                                height: auto;
                                border-radius: 8px;
                                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                            }
                        </style>
                    </head>
                    <body>
                        <img src="data:$contentType;base64,$base64Image" class="promo-banner" alt="–ü—Ä–æ–º–æ –±–∞–Ω–Ω–µ—Ä"/>
                    </body>
                    </html>
                """.trimIndent()

                val encodedHtml = Base64.getEncoder().encodeToString(htmlTemplate.toByteArray())

                call.respond(
                    HttpStatusCode.OK,
                    HtmlResponse(true, html = encodedHtml)
                )

            } catch (e: Exception) {
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", e)
                call.respond(
                    HttpStatusCode.InternalServerError,
                    HtmlResponse(false, message = "–û—à–∏–±–∫–∞: ${e.message}")
                )
            }
        }

        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É (–≤–∞—Ä–∏–∞–Ω—Ç 3)
        get("/html-link/{imageId}") {
            try {
                val imageId = call.parameters["imageId"] ?: ""
                val contentType = imageMetadata[imageId]

                if (contentType == null) {
                    call.respond(
                        HttpStatusCode.NotFound,
                        HtmlResponse(false, message = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    )
                    return@get
                }

                val imageUrl = minioService.getPresignedUrl(imageId, contentType)

                val htmlTemplate = """
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="UTF-8">
                        <title>–ü—Ä–æ–º–æ –±–∞–Ω–Ω–µ—Ä</title>
                        <style>
                            .promo-banner {
                                max-width: 100%;
                                height: auto;
                                border-radius: 8px;
                                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                            }
                        </style>
                    </head>
                    <body>
                        <img src="$imageUrl" class="promo-banner" alt="–ü—Ä–æ–º–æ –±–∞–Ω–Ω–µ—Ä"/>
                    </body>
                    </html>
                """.trimIndent()

                val encodedHtml = Base64.getEncoder().encodeToString(htmlTemplate.toByteArray())

                call.respond(
                    HttpStatusCode.OK,
                    HtmlResponse(true, html = encodedHtml)
                )

            } catch (e: Exception) {
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML —Å–æ —Å—Å—ã–ª–∫–æ–π", e)
                call.respond(
                    HttpStatusCode.InternalServerError,
                    HtmlResponse(false, message = "–û—à–∏–±–∫–∞: ${e.message}")
                )
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ HTML (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        get("/preview/{imageId}") {
            try {
                val imageId = call.parameters["imageId"] ?: ""
                val contentType = imageMetadata[imageId]

                if (contentType == null) {
                    call.respondText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", status = HttpStatusCode.NotFound)
                    return@get
                }

                val imageUrl = minioService.getPresignedUrl(imageId, contentType)

                val html = """
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="UTF-8">
                        <title>–ü—Ä–æ–º–æ –±–∞–Ω–Ω–µ—Ä - –ü—Ä–µ–≤—å—é</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 40px; }
                            .promo-banner {
                                max-width: 100%;
                                height: auto;
                                border-radius: 8px;
                                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                                margin-bottom: 20px;
                            }
                        </style>
                    </head>
                    <body>
                        <h1>–ü—Ä–µ–≤—å—é –±–∞–Ω–Ω–µ—Ä–∞</h1>
                        <img src="$imageUrl" class="promo-banner" alt="–ü—Ä–æ–º–æ –±–∞–Ω–Ω–µ—Ä"/>
                        <p>ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $imageId</p>
                    </body>
                    </html>
                """.trimIndent()

                call.respondText(html, ContentType.Text.Html)

            } catch (e: Exception) {
                call.respondText("–û—à–∏–±–∫–∞: ${e.message}", status = HttpStatusCode.InternalServerError)
            }
        }
    }
}